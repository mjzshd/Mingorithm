#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class P8XCoinChangeAnother {
public:
	vector <long long> solve(int n, long long s, long long c)
    {
        vector<long long> ret(n, 0);
        vector<long long> empty_set;
        for (int i=0; i<n-1; i++)
        {
            ret[i]+=(s&1);
            c -= (s&1);
            if (c < 0) return empty_set;
            s >>= 1;
            if (s < c)
            {
                long long x = c - s;
                ret[i] += x+x;
                s -= x;
                c -= x+x;
                if (c<0) return empty_set;
            }
        }
        if (s!=c) return empty_set;
        ret[n-1] = c;
        return ret;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, long long p1, long long p2, bool hasAnswer, vector <long long> p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	P8XCoinChangeAnother *obj;
	vector <long long> answer;
	obj = new P8XCoinChangeAnother();
	clock_t startTime = clock();
	answer = obj->solve(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p3.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p3[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p3.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p3[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	long long p1;
	long long p2;
	vector <long long> p3;
	
	{
        // ----- test 0 -----
        p0 = 2;
        p1 = 4ll;
        p2 = 3ll;
        long long t3[] = {2ll,1ll};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------
	}
	
	{
        // ----- test 1 -----
        p0 = 3;
        p1 = 6ll;
        p2 = 3ll;
        long long t3[] = {0ll,3ll,0ll};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
        // ------------------
	}
	
	{
        // ----- test 2 -----
        p0 = 2;
        p1 = 8ll;
        p2 = 1ll;
        p3.clear() /*{}*/;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
        // ------------------
	}
	
	{
        // ----- test 3 -----
        p0 = 1;
        p1 = 10000000000ll;
        p2 = 10000000000ll;
        long long t3[] = {10000000000ll};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
        // ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING