#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include<cstring>
using namespace std;

class GreenWarfare {
public:
    int grid[500][500], last[500];
    int src, des, n;
    bool bfs()
    {
        bool vst[500];
        memset(vst, false, sizeof(vst));
        memset(last, -1, sizeof(last));
        queue<int> que;
        que.push(src);
        vst[src] = true;
        while(!que.empty()) {
            //cout << que.size() << endl;
            int current = que.front(); que.pop();
            for (int i=0; i<n; i++)
            {
                if (grid[current][i]>0)
                {
                    //printf("current = %d, i=%d\n", current, i);
                    if (vst[i]) continue;
                    que.push(i);
                    vst[i] = true;
                    last[i] = current;
                    if (i==des) return true;
                }
            }
        }
        return false;
    }
    int maxflow()
    {
        int ret = 0;
        while(bfs()){
            //cout << ret << endl;
            int mincost = 0x7fffffff;
            for (int i=des; last[i]!=-1; i = last[i])
                mincost = min(mincost, grid[last[i]][i]);
            for (int i=des; last[i]!=-1; i = last[i])
                grid[last[i]][i]-=mincost, grid[i][last[i]] += mincost;
            ret += mincost;
        }
        return ret;
    }
    int disq(int x1, int y1, int x2, int y2)
    {
        return (x1-x2)*(x1-x2) + (y1-y2)*(y1-y2);
    }
	int minimumEnergyCost(vector <int> canonX, vector <int> canonY, vector <int> baseX, vector <int> baseY, vector <int> plantX, vector <int> plantY, int energySupplyRadius) {
        memset(grid, 0, sizeof(grid));
        src = baseX.size() + plantX.size();
        des = baseX.size() + plantX.size() + 1;
        n = des + 1;
        for (int i=0; i<baseX.size(); i++){
            int mindisq = 0x7fffffff;
            for (int j=0; j<canonX.size(); j++){
                int tmp = disq(canonX[j], canonY[j], baseX[i], baseY[i]);
                if (tmp < mindisq)
                    mindisq = tmp;
            }
            //printf("i=%d, mindisq = %dok!\n", i, mindisq);
            grid[src][i] = mindisq;
        }
        for (int i=0; i<plantX.size(); i++){
            int mindisq = 0x7fffffff;
            for (int j=0; j<canonX.size(); j++){
                int tmp = disq(canonX[j], canonY[j],plantX[i],plantY[i]);
                if (mindisq > tmp)
                    mindisq = tmp;
            }
            //printf("Yes!mindisq = %d, i = %d\n", mindisq, i);
            grid[i+baseX.size()][des] = mindisq;
            bool flag = false;
            for (int j=0; j<baseX.size(); j++)
                if (disq(baseX[j], baseY[j], plantX[i], plantY[i]) <= energySupplyRadius*energySupplyRadius)
                    grid[j][i+baseX.size()] = 0x7fffffff, flag = true;// printf("Hello!\n");
        }
        return maxflow();
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, vector <int> p2, vector <int> p3, vector <int> p4, vector <int> p5, int p6, bool hasAnswer, int p7) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p3.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p3[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p4.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p4[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p5.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p5[i];
	}
	cout << "}" << "," << p6;
	cout << "]" << endl;
	GreenWarfare *obj;
	int answer;
	obj = new GreenWarfare();
	clock_t startTime = clock();
	answer = obj->minimumEnergyCost(p0, p1, p2, p3, p4, p5, p6);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p7 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p7;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	vector <int> p1;
	vector <int> p2;
	vector <int> p3;
	vector <int> p4;
	vector <int> p5;
	int p6;
	int p7;

	{
	// ----- test 0 -----
	int t0[] = {0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,2,3};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {0,0,0};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {3};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	int t5[] = {3};
			p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
	p6 = 4;
	p7 = 14;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, p5, p6, true, p7) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	int t0[] = {0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,2,3};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {0,0,0};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {2};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	int t5[] = {2};
			p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
	p6 = 4;
	p7 = 8;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, p5, p6, true, p7) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	int t0[] = {3,6};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {3,6};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,2,3,4,5};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {5,4,2,3,1};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {1,2,5};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	int t5[] = {1,2,5};
			p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
	p6 = 5;
	p7 = 12;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, p5, p6, true, p7) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	int t0[] = {0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {-10,-10,10};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {10,-10,0};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {10,10,-10};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	int t5[] = {10,-10,0};
			p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
	p6 = 10;
	p7 = 200;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, p5, p6, true, p7) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	int t0[] = {0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {3};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {3};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {1,2,3};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	int t5[] = {0,0,0};
			p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
	p6 = 4;
	p7 = 14;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, p5, p6, true, p7) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
