#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;


class ColorfulDecoration {
public:
    int getMaximum(vector <int> xa, vector <int> ya, vector <int> xb, vector <int> yb) {
        int n = xa.size();
        int left = 0, right = 2000000000;
        while(left<=right) {
            int mid = left + (right - left)/2;
            bool grid[2*n][2*n];
            memset(grid, false, sizeof(grid));
            for (int i=0; i<2*n; i++)
                for (int j=0; j<2*n; j++) {
                    if (i%n != j%n) {
                        int x1 = (i < n) ? xa[i] : xb[i-n];
                        int y1 = (i < n) ? ya[i] : yb[i-n];
                        int x2 = (j < n) ? xa[j] : xb[j-n];
                        int y2 = (j < n) ? ya[j] : yb[j-n];
                        if (abs(x1-x2) < mid && abs(y1-y2) < mid)
                            grid[i][((j>=n) ? (j-n) : (j+n))] = true;
                    }
                }
            for (int i = 0; i<n*2; i++)
                grid[i][i] = true;
            for (int k=0; k<2*n; k++)
                for (int i=0; i<2*n; i++)
                    for(int j=0; j<2*n; j++)
                        if (grid[i][k] && grid[k][j])
                            grid[i][j] = true;
            bool flag = true;
            for (int i=0; i<n; i++)
                if (grid[i][i+n] && grid[i+n][i])
                    flag = false;
            //cout << flag << endl;
            if (!flag) right = mid - 1;
            else left = mid + 1;
        }
        return left - 1;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, vector <int> p2, vector <int> p3, bool hasAnswer, int p4) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p0[i];
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p1.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p1[i];
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p2.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p2[i];
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p3.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p3[i];
    }
    cout << "}";
    cout << "]" << endl;
    ColorfulDecoration *obj;
    int answer;
    obj = new ColorfulDecoration();
    clock_t startTime = clock();
    answer = obj->getMaximum(p0, p1, p2, p3);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p4 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p4;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <int> p0;
    vector <int> p1;
    vector <int> p2;
    vector <int> p3;
    int p4;

    {
        // ----- test 0 -----
        int t0[] = {10,0,7};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {0,19,6};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {20,10,25};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        int t3[] = {20,35,25};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        p4 = 19;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        int t0[] = {4, 5};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {1, 2};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {9, 4};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        int t3[] = {4, 1};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        p4 = 5;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        int t0[] = {0,0,1,1};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {0,0,1,1};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {1,1,0,0};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        int t3[] = {1,1,0,0};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        p4 = 0;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        int t0[] = {0,3,0,5,6};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {1,6,0,8,5};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {6,1,7,4,7};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        int t3[] = {5,9,2,8,9};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        p4 = 3;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        int t0[] = {1000000000,0};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {0,1000000000};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {0,1000000000};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        int t3[] = {0,1000000000};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        p4 = 1000000000;
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
