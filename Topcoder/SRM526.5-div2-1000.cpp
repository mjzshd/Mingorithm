#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class MagicNaming {
public:
    int dp[51][51];
    string s;
	int maxReindeers(string s_) {
		s = s_;
        for (int i=0; i<51; i++)
            for(int j=0; j<51; j++)
                dp[i][j] = -1000000;
        for (int i=0; i<s.length(); i++) dp[i][0] = 1;
        for (int i=1; i < s.length(); i++) {
            for(int j = 1; j <= i; j++) {
                for (int k=0; k <= j; k++) {
                    string s1 = s.substr(j, i-j+1);
                    string s2 = s.substr(k, j-k);
                    if (dp[i][j] < dp[j-1][k] + 1 && s1 + s2 >= s2 + s1) 
                        dp[i][j] = dp[j-1][k] + 1;
                }
            }
        }
        int ret = -1;
        for (int i=0; i<s.length(); i++) 
            ret = max(dp[s.length()-1][i], ret);
        return ret;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	MagicNaming *obj;
	int answer;
	obj = new MagicNaming();
	clock_t startTime = clock();
	answer = obj->maxReindeers(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	
	{
        // ----- test 0 -----
        p0 = "aba";
        p1 = 2;
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
	}
	
	{
        // ----- test 1 -----
        p0 = "babbaba";
        p1 = 2;
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
	}
	
	{
        // ----- test 2 -----
        p0 = "philosophersstone";
        p1 = 5;
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
	}
	
	{
        // ----- test 3 -----
        p0 = "knuthmorrispratt";
        p1 = 7;
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------
	}
	
	{
        // ----- test 4 -----
        p0 = "acrushpetrtourist";
        p1 = 7;
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------
	}
	
	{
        // ----- test 5 -----
        p0 = "zzzzz";
        p1 = 5;
        all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
        // ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING