#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class SumOfLuckiness {
public:
    long long dp[11][11][11][2];
    char a[12], N;
    long long dfs(int n, int x, int y, int flag)
    {
        if (n==-1) return abs(x-y);
        if (dp[n][x][y][flag]!=-1) return dp[n][x][y][flag];
        dp[n][x][y][flag] = 0;
        int maxnum = (flag == 1) ? a[n] : 9;
        for (int i=0; i<=maxnum; i++)
            dp[n][x][y][flag] += dfs(n-1, x + ((i==4)?1:0), y + ((i==7)?1:0), flag & (i<a[n] ? 0 : 1));
        return dp[n][x][y][flag];
    }
    
    long long calc(int num)
    {
        if (num==0) return 0;
        N = 0;
        memset(dp, -1, sizeof(dp));
        while(num){
            a[N++] = num%10;
            num/=10;
        }
        return dfs(N-1, 0, 0, 1);
    }
    
	long long theSum(int B, int A) {
        //return calc(10);
        return calc(A) - calc(B-1);
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, long long p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	SumOfLuckiness *obj;
	long long answer;
	obj = new SumOfLuckiness();
	clock_t startTime = clock();
	answer = obj->theSum(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	long long p2;
	
	{
        // ----- test 0 -----
        p0 = 1;
        p1 = 10;
        p2 = 2ll;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------
	}
	
	{
        // ----- test 1 -----
        p0 = 40;
        p1 = 47;
        p2 = 8ll;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------
	}
	
	{
        // ----- test 2 -----
        p0 = 58;
        p1 = 526;
        p2 = 231ll;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------
	}
	
	{
        // ----- test 3 -----
        p0 = 4444;
        p1 = 7777;
        p2 = 2338ll;
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------
	}
	
	{
        // ----- test 4 -----
        p0 = 585858585;
        p1 = 858585858;
        p2 = 287481025ll;
        all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
        // ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING