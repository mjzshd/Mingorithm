#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class DropCoins {
public:
	int getMinimum(vector <string> board, int K) {
        int ret = 0x7fffffff;
        int row = board.size();
        int col = board[0].length();
		for (int i =0 ; i< row ;i++)
            for(int j= row-1; j >= i; j--) 
                for(int k=0; k<col; k++)
                    for(int p = col-1; p >= k; p--)
                    {
                        int sum=0;
                        for (int m = i; m<=j; m++)
                            for(int n = k; n<=p; n++)
                                sum += (board[m][n] == 'o') ? 1:0;
                        int op = i + row-1-j + (i<(row-1-j)?i:(row-1-j));
                        op += k + col-1-p + (k<(col-1-p)?k:(col-1-p));
                        if(sum==K){
                            //printf("i=%d, j=%d, k=%d, p=%d\n", i,j,k,p);
                            ret=min(ret, op);
                        }
                    }
        if (ret == 0x7fffffff)
            return -1;
        else
            return ret;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	DropCoins *obj;
	int answer;
	obj = new DropCoins();
	clock_t startTime = clock();
	answer = obj->getMinimum(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	int p2;
	
	{
        // ----- test 0 -----
        string t0[] = {".o..","oooo","..o."};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 3;
        p2 = 2;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------
	}
	
	{
        // ----- test 1 -----
        string t0[] = {".....o","......","oooooo","oooooo","......","o....."};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 12;
        p2 = 3;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------
	}
	
	{
        // ----- test 2 -----
        string t0[] = {"....",".oo.",".oo.","...."};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 3;
        p2 = -1;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------
	}
	
	{
        // ----- test 3 -----
        string t0[] = {".......","..ooo..","ooooooo",".oo.oo.","oo...oo"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 12;
        p2 = 4;
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------
	}
	
	{
        // ----- test 4 -----
        string t0[] = {".................",".ooooooo...oooo..",".ooooooo..oooooo.",".oo.......oo..oo.",".oo.......oo..oo.",".ooooo.....oooo..",".ooooooo...oooo..",".....ooo..oo..oo.","......oo..oo..oo.",".ooooooo..oooooo.",".oooooo....oooo..","................."};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 58;
        p2 = 6;
        all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
        // ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING