#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class MagicalSquare {
public:
    vector<string> rowStrings, columnStrings;
    bool isValid(const int& l0, const int& r0, const int& l1, const int& r1)
    {
        if ((l0 + l1 > columnStrings[0].length())||
            (r0 + r1) > columnStrings[1].length() ||
            (rowStrings[0].length()+rowStrings[1].length()-l0-r0-l1-r1) > columnStrings[2].length())
            return false;
        
        string s[3][3];
        s[0][0] = rowStrings[0].substr(0, l0);
        s[0][1] = rowStrings[0].substr(l0, r0);
        s[0][2] = rowStrings[0].substr(l0+r0);
        
        s[1][0] = rowStrings[1].substr(0, l1);
        s[1][1] = rowStrings[1].substr(l1, r1);
        s[1][2] = rowStrings[1].substr(l1+r1);
        
        s[2][0] = columnStrings[0].substr(l0+l1);
        s[2][1] = columnStrings[1].substr(r0+r1);
        s[2][2] = columnStrings[2].substr(rowStrings[0].length()+rowStrings[1].length()-l0-r0-l1-r1);
        if ((s[0][0]+s[1][0]+s[2][0] != columnStrings[0]) ||
            (s[0][1]+s[1][1]+s[2][1] != columnStrings[1]) ||
            (s[0][2]+s[1][2]+s[2][2] != columnStrings[2]))
            return false;
        if (s[2][0]+s[2][1]+s[2][2] != rowStrings[2])
            return false;
        return true;
    }
	long long getCount(vector <string> rowstrings, vector <string> columnstrings) {
        long long ret = 0;
        rowStrings = rowstrings;
        columnStrings = columnstrings;
		for (int x=0; x <= rowStrings[0].length(); x++)
            for (int y=0; y <= rowStrings[0].length() - x; y++)
                for (int i = 0; i <= rowStrings[1].length(); i++)
                    for (int j = 0; j <= rowStrings[1].length() - i; j++){
                        if(isValid(x, y, i, j))
                            ret++;
                    }
        return ret;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, bool hasAnswer, long long p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	MagicalSquare *obj;
	long long answer;
	obj = new MagicalSquare();
	clock_t startTime = clock();
	answer = obj->getCount(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <string> p1;
	long long p2;
	
	{
        // ----- test 0 -----
        string t0[] = {"f","o","x"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"f","o","x"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 1ll;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------
	}
	
	{
        // ----- test 1 -----
        string t0[] = {"x","x","x"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"x","","xx"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 3ll;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------
	}
	
	{
        // ----- test 2 -----
        string t0[] = {"cd","cd","cd"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"dvd","dvd","dvd"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 0ll;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------
	}
	
	{
        // ----- test 3 -----
        string t0[] = {"abab","ab","abab"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"abab","ab","abab"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 11ll;
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------
	}
	
	{
        // ----- test 4 -----
        string t0[] = {"qwer","asdf","zxcv"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"qaz","wsx","erdfcv"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 1ll;
        all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
        // ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING