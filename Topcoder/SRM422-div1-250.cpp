#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class PrimeSoccer {
public:
    long long fac(int num)
    {
        long long ret=1;
        for (long long i=num; i>=1; i--) 
            ret*=i;
        return ret;
    }
    double powd(double p, int n){
        double ret=1;
        for (int i=0; i<n; i++) 
            ret*=p;
        return ret;
    }
    long long c(int n, int m){
        if(m==0||m==n)return 1;
        return fac(n)/(fac(m)*fac(n-m));
    }
    double rate(double p, int n){
        return (double)c(18, n)*powd(p, n)*powd(p, 18-n);
    }
	double getProbability(int skillOfTeamA, int skillOfTeamB) {
		bool nonPrime[19];
        memset(nonPrime, false, sizeof(nonPrime));
        nonPrime[0]=nonPrime[1]=1;
        nonPrime[4]=nonPrime[6]=nonPrime[8]=nonPrime[9]=nonPrime[10]=nonPrime[12]=1;
        nonPrime[14]=nonPrime[15]=nonPrime[16]=nonPrime[18]=1;
        double p1=0, p2=0;
        for (int i=0; i<=18; i++) {
            if (nonPrime[i]) {
                p1+=rate((double)skillOfTeamA/100, i);
                p2+=rate((double)skillOfTeamB/100, i);
            }
        }
        printf("p1=%f, p2=%f\n", p1, p2);
        return (double)1-p1*p2;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, double p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	PrimeSoccer *obj;
	double answer;
	obj = new PrimeSoccer();
	clock_t startTime = clock();
	answer = obj->getProbability(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = fabs(p2 - answer) <= 1e-9 * max(1.0, fabs(p2));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	double p2;
	
	{
        // ----- test 0 -----
        p0 = 50;
        p1 = 50;
        p2 = 0.5265618908306351;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------
	}
	
	{
        // ----- test 1 -----
        p0 = 100;
        p1 = 100;
        p2 = 0.0;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------
	}
	
	{
        // ----- test 2 -----
        p0 = 12;
        p1 = 89;
        p2 = 0.6772047168840167;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING