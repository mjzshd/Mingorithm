#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;
const int MOD = 1000000007;

class SmallBricks31 {
public:
    int w, h, m;
    int dp[11][1<<10];
    void dfs(int layer, int pos, int cur_state, int ori_state){
        //printf("%d %d %d %d\n", layer, pos, cur_state, ori_state);
        if (pos==w) {
            if (!cur_state) return;
            dp[layer+1][cur_state]+=dp[layer][ori_state];
            dp[layer+1][cur_state]%=MOD;
            return;
        }
        dfs(layer, pos+1, cur_state, ori_state);
        if (ori_state & (1<<pos)) 
            dfs(layer, pos+1, cur_state | (1<<pos), ori_state);
        if (pos+1<w && (ori_state & (1<<pos)) && (ori_state & (1<<(pos+1))))
            dfs(layer, pos+2, cur_state | (1<<pos) | (1<<(pos+1)), ori_state);
        if (pos+2<w && (ori_state & (1<<pos)) && (ori_state & (1<<(pos+2)))) 
            dfs(layer, pos+3, cur_state | (1<<pos) | (1<<(pos+1)) | (1<<(pos+2)), ori_state);
    }
    
	int countWays(int _w, int _h) {
		w=_w;
        h=_h;
        m=(1<<w);
        memset(dp, 0, sizeof(dp));
        dp[0][m-1]=1;
        for (int i=0; i<h; i++) 
            for (int j=0; j<m; j++) 
                if (dp[i][j]) 
                    dfs(i, 0, 0, j);
        int ret=0;
        for (int i=0; i<=h; i++) 
            for (int j=0; j<m; j++) 
                ret=(ret+dp[i][j])%MOD;
        return ret;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	SmallBricks31 *obj;
	int answer;
	obj = new SmallBricks31();
	clock_t startTime = clock();
	answer = obj->countWays(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	
	{
        // ----- test 0 -----
        p0 = 1;
        p1 = 3;
        p2 = 4;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------
	}
	
	{
        // ----- test 1 -----
        p0 = 3;
        p1 = 1;
        p2 = 13;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------
	}
	
	{
        // ----- test 2 -----
        p0 = 3;
        p1 = 2;
        p2 = 84;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------
	}
	
	{
        // ----- test 3 -----
        p0 = 4;
        p1 = 9;
        p2 = 132976888;
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------
	}
	
	{
        // ----- test 4 -----
        p0 = 5;
        p1 = 5;
        p2 = 11676046;
        all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
        // ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING