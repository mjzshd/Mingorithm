#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class NameInput {
public:
    int dp[2600][2600];
    int closest[2600][62][2];
    string pre, name;
    map<char, vector<int> > mp;
    const static int INF = 0x7fffffff;
    int dis(int i, int j)
    {
        if (i>j) swap(i, j);
        return min(j-i,  i + (int)pre.length() - j);
    }
	int countUpDownKeyPresses(vector <string> predictionSequence, vector <string> nameSequence) {
		for (int i=0; i<predictionSequence.size(); i++) pre+=predictionSequence[i];
		for (int i=0; i<nameSequence.size(); i++) name += nameSequence[i];
		for (int i=0; i<pre.length(); i++) mp[pre[i]].push_back(i);
		for (int i=0; i<name.length(); i++) if (mp[name[i]].size() == 0 ) return -1;
        dp[0][0] = 0;
        for (int i=1; i<=name.length(); i++)
            for (int j=0; j<pre.length(); j++)
                dp[i][j] = INF;
        for (int i=1; i<pre.length(); i++) dp[0][i] = INF;
        for (int i=1; i<=name.length(); i++)
            for (int j=0; j<mp[name[i-1]].size(); j++) {
                if (i-2<0) {dp[i][mp[name[i-1]][j] ] = dp[i-1][0] + dis(0, mp[name[i-1]][j]); continue;}
                for (int k=0; k<mp[name[i-2]].size(); k++) {
                    dp[i][mp[name[i-1]][j] ] = min(dp[i][mp[name[i-1]][j] ], dp[i-1][mp[name[i-2]][k]] + dis(mp[name[i-2]][k], mp[name[i-1]][j]));
                }
            }
        int ret = 0x7fffffff;
        for (int i=0; i<mp[name[name.length()-1]].size(); i++)
            ret = min(ret, dp[name.length()][mp[name[name.length()-1]][i]]);
        return ret;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	NameInput *obj;
	int answer;
	obj = new NameInput();
	clock_t startTime = clock();
	answer = obj->countUpDownKeyPresses(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	vector <string> p1;
	int p2;

	{
	// ----- test 0 -----
	string t0[] = {"Jjhon"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"John"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 5;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	string t0[] = {"abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ","0123456789"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"Joh","nAndFr","iends"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 186;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	string t0[] = {"aaaabbbab","baabbabaabba"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"bbaaababba","baababababbb"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 16;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	string t0[] = {"john"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"John"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = -1;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	string t0[] = {"4"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"4444444444444"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 0;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 5 -----
	string t0[] = {"abcABC123","cbaCBA321"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"aB32C2AaB3c","c32bA"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 38;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
